<?phpnamespace App\Repositories\Custom\Accounts\Account;//use Bosnadev\Repositories\Eloquent\Repository;use App\Repositories\Util\LogRepository;use Exception;use App\Models\Account;use App\Repositories\Util\LogRepository as LogRepo;use Request;use App\Repositories\Custom\AccountsCustom;class InformationsCustom{	protected $_accountsCustom;	public function __construct($id = null) {		if($id){						$this->_accountsCustom = new AccountsCustom($id);		}else{			$this->_accountsCustom = new AccountsCustom();		}        return $this;    }       public function checkNotAllowedFields(Array $param) {        $allowed_fields = [            'first_name', 'last_name', 'photo', 'honorific', 'phone', 'password', 'confirmation_password'                  ];        $found = false;        foreach ($param as $key => $value) {                        if (!in_array($key, $allowed_fields)) {                $found = true;                break;            }        }        return $found;    }    /**     * valid param     *      * @param array $param     * @return boolean     * @throws Exception     */    public function validate($params) {                try{            if (!is_array($params)) {                throw new Exception("Expected array as parameter , " . (is_object($params) ? get_class($params) : gettype($params)) . " found.");            } 			            //Check if a given field can be updated by user                if ($this->checkNotAllowedFields($params)) {                	 $result = array("code" => 4000, "description" => "There are some field(s) that you are not allowed to edit");                    echo json_encode($result, JSON_UNESCAPED_SLASHES);                    return false;                }                if (array_key_exists("first_name", $params)) {                    if (!is_string($params['first_name'])) {                        $result = array("code" => 4000, "description" => "First name must be a string");                        echo json_encode($result, JSON_UNESCAPED_SLASHES);                        return false;                    }                }                if (array_key_exists("last_name", $params)) {                    if (!is_string($params['last_name'])) {                        $result = array("code" => 4000, "description" => "Last name must be a string");                        echo json_encode($result, JSON_UNESCAPED_SLASHES);                        return false;                    }                }                                if (array_key_exists("password", $params)) {                    if (!is_string($params['password'])) {                        $result = array("code" => 4000, "description" => "password must be a string");                        echo json_encode($result, JSON_UNESCAPED_SLASHES);                        return false;                    }                }                if (array_key_exists("confirmation_password", $params)) {                    if (!is_string($params['confirmation_password'])) {                        $result = array("code" => 4000, "description" => "confirmation_password must be a string");                        echo json_encode($result, JSON_UNESCAPED_SLASHES);                        return false;                    }                    if ((strlen($params['confirmation_password']) < 8)) {                        $result = array("code" => 4000, "description" => "confirmation_password must contain at least 8 characters");                        echo json_encode($result, JSON_UNESCAPED_SLASHES);                        return false;                    }                }                if ((array_key_exists("password", $params) && (array_key_exists("confirmation_password", $params)))) {                    if ($params['password'] !== $params['confirmation_password']) {                        $result = array("code" => 4000, "description" => "password and confirmation_password should match");                        echo json_encode($result, JSON_UNESCAPED_SLASHES);                        return false;                    }                }                if ((array_key_exists("password", $params) && (!array_key_exists("confirmation_password", $params)))) {                    $result = array("code" => 4000, "description" => "Invalid request. You must provide both password and confirmation password");                    echo json_encode($result, JSON_UNESCAPED_SLASHES);                    return false;                }                if ((!array_key_exists("password", $params) && (array_key_exists("confirmation_password", $params)))) {                    $result = array("code" => 4000, "description" => "Invalid request. You must provide both password and confirmation password");                    echo json_encode($result, JSON_UNESCAPED_SLASHES);                    return false;                }                if (array_key_exists("photo", $params)) {                    if (!is_string($params['photo'])) {                        $result = array("code" => 4000, "description" => "photo must be a string");                        echo json_encode($result, JSON_UNESCAPED_SLASHES);                        return false;                    }                }                if (array_key_exists("phone", $params)) {                    if (!is_string($params['phone'])) {                        $result = array("code" => 4000, "description" => "phone must be a string");                        echo json_encode($result, JSON_UNESCAPED_SLASHES);                        return false;                    }                }                if (array_key_exists("honorific", $params)) {                    if (!is_string($params['honorific'])) {                        $result = array("code" => 4000, "description" => "honorific must be a string");                        echo json_encode($result, JSON_UNESCAPED_SLASHES);                        return false;                    }                    if (!in_array($params['honorific'], ['Ms', 'Mr'])) {                        $result = array("code" => 4000, "description" => "honorific must be one of: Ms or Mr");                        echo json_encode($result, JSON_UNESCAPED_SLASHES);                        return false;                    }                }            return TRUE;                    } catch (Exception $ex) {            LogRepository::printLog('error', $ex->getMessage());        }    }    public function updateAccount($informations, $id){        try{        	$valid = $this->validate($informations);                        if(!$valid){                http_response_code(400);                die();             }            // Get the user account with its ID            $logged_account = $this->_accountsCustom->model()->find($id);            if (!is_null($logged_account)) {                   	if(isset($informations["confirmation_password"])){            		unset($informations["confirmation_password"]);            	}                                                         //var_dump($informations);die();                $logged_account->dbSave($informations);                // Write in the log                unset($informations["password"]);                LogRepo::printLog('info', "Information of account #{" . $id . "} has just been updated. Request inputs: ".var_export($informations,true));                //  prepare the response                $result = $this->prepareReponseAfterPost($logged_account);                //  Return response                return $result;            } else {                LogRepo::printLog('error', "Invalid attempt to update a non existing account #{" . $id . "}. Returned code: 4006. Request inputs:".var_export($informations,true));                $result = array("code" => 4007, "description" => "Invalid object ID");                return response()->json($result, 400);            }         }catch(Exception $e){              LogRepo::printLog('error', $e->getMessage());         }           }        /**     * Format of the response     *      * @param array $account     * @return array     */    public function prepareReponseAfterPost($account) {        try {                        $result = array(                'code' => 200,                'account_id' => $account->id,                               'link' => array(                    array(                        'href' => '/accounts/' . $account->id,                        'rel'=> 'retrieve',                        'requestTypes' => array("GET"),                        'responseTypes' => array("application/json")                    )                )            );            return $result;        } catch (Exception $ex) {            LogRepository::printLog('error', $ex->getMessage());        }    }}